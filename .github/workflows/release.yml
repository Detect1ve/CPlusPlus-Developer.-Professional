name: 'C++ CI'

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
      - feature/github_actions

jobs:
  build:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Install CMake
        run: |
          wget -qO- "https://cmake.org/files/v4.0/cmake-4.0.3-linux-x86_64.tar.gz" | sudo tar --strip-components=1 -xz -C /usr/local
      - name: Install GCC
        run: |
          sudo apt-get update && sudo apt-get install g++-14 -y
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-14 10
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-14 10
      - run: cmake -G Ninja -B build -D PATCH_VERSION=${{ github.run_number }}
      - run: cmake --build build
      - run: cmake --build build --target test
      - run: cmake --build build --target package
      - id: find_packages
        name: Find all unique DEB packages
        run: |
          PACKAGES=$(find . -name "*-0.0.${{ github.run_number }}-Linux.deb" | awk -F/ '{print $NF, $0}' | sort -k1,1 -u | cut -d' ' -f2- | jq -R -s -c 'split("\n")[:-1]')
          echo "packages=$PACKAGES" >> "$GITHUB_OUTPUT"
      - run: cmake --build build --target docs
      - id: find_docs
        name: Find Doxygen Documentation
        run: |
          DOCS_DIR=$(cmake -LA -N build | grep DOXYGEN_OUTPUT_DIRECTORY | cut -d= -f2)/html
          echo "docs_dir=$DOCS_DIR" >> "$GITHUB_OUTPUT"
      - name: Deploy Doxygen Documentation to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ${{ steps.find_docs.outputs.docs_dir }}
          force_orphan: true
          full_commit_message: 'Deploy Doxygen documentation for ${{ github.sha }}'
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false
      - name: Upload Release Assets
        uses: actions/github-script@v6
        env:
          UPLOAD_URL: ${{ steps.create_release.outputs.upload_url }}
          PACKAGES: ${{ steps.find_packages.outputs.packages }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const packages = JSON.parse(process.env.PACKAGES);

            for (const packagePath of packages) {
              const packageName = packagePath.split('/').pop();
              console.log(`Uploading ${packageName} from ${packagePath}`);

              await github.rest.repos.uploadReleaseAsset({
                url: process.env.UPLOAD_URL,
                headers: {
                  'content-type': 'application/vnd.debian.binary-package',
                  'content-length': fs.statSync(packagePath).size
                },
                name: packageName,
                data: fs.readFileSync(packagePath)
              });
            }

  pull_request_ci:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Install CMake
        run: |
          wget -qO- "https://cmake.org/files/v4.0/cmake-4.0.3-linux-x86_64.tar.gz" | sudo tar --strip-components=1 -xz -C /usr/local
      - name: Install GCC
        run: |
          sudo apt-get update && sudo apt-get install g++-14 -y
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-14 10
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-14 10
      - run: cmake -G Ninja -B build -D PATCH_VERSION=${{ github.run_number }}
      - run: cmake --build build
      - run: cmake --build build --target test
      - run: cmake --build build --target package
      - run: cmake --build build --target docs
